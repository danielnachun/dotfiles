"Basic settings
set guicursor=
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set showcmd
set number
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase
set backspace=2
set autoindent
set formatoptions=c,q,r,t
set ruler
set wrapscan
set mouse=a
set hidden
set laststatus=2
set encoding=utf-8
set termencoding=utf-8
set noequalalways
set timeoutlen=1000 ttimeoutlen=0
set noshowmode
set ffs=unix,dos,mac
set foldmethod=syntax
set foldlevel=99
set termguicolors
set shortmess+=c
set cursorline
set mousemoveevent
"set autochdir
"set winminheight=20

"What were these for?
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"Set buffer autocmds
autocmd BufWinEnter,WinEnter term://* startinsert 
autocmd BufWinEnter,WinEnter term://* :set cursorline 
autocmd BufWinEnter,WinEnter term://* :set nonumber 
autocmd BufLeave term://* stopinsert
autocmd BufLeave term://* :set nocursorline
"autocmd BufLeave term://* :set number
autocmd BufEnter,WinEnter * silent! :lcd%:p:h
autocmd TermOpen * :resize 18
autocmd TermOpen * :set nonumber
autocmd OptionSet guicursor noautocmd set guicursor=
autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path "%"

"Navigate buffers
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l

tnoremap <C-J> <C-\><C-n><C-W>j
tnoremap <C-K> <C-\><C-n><C-W>k
tnoremap <C-H> <C-\><C-n><C-W>h
tnoremap <C-L> <C-\><C-n><C-W>l
tnoremap <Esc> <C-\><C-n>

"map leader to ,
let mapleader= ","
let maplocalleader = ","

let g:plug_timeout = 240
call plug#begin('$HOME/.nvim/plugged')

"Chezmoi must be run first
Plug 'alker0/chezmoi.vim'

"UI
Plug 'MunifTanjim/nui.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'rcarriga/nvim-notify'
Plug 'folke/noice.nvim'
"Plug 'vigoux/notifier.nvim'

"Searc
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build' }
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.0' }

"Miscellaneous
"Plug 'romgrk/barbar.nvim' "status bar
Plug 'akinsho/bufferline.nvim', { 'tag': 'v3.*' }
Plug 'tiagovla/scope.nvim'
Plug 'nvim-lualine/lualine.nvim'
"Plug 'wfxr/minimap.vim'

Plug 'mbbill/undotree' "undo history
"Plug 'christoomey/vim-tmux-navigator' "tmux shortcuts
"Plug 'zhaocai/goldenview.vim' "split buffers
Plug 'folke/which-key.nvim'
"Plug 'nhooyr/neoman.vim' "use neovim to read man pages
"nnoremap <silent> <leader>      :<c-u>WhichKey ','<CR>
"nnoremap <silent> <localleader> :<c-u>WhichKey ','<CR>

Plug 'folke/trouble.nvim'
Plug 'ray-x/guihua.lua', {'do': 'cd lua/fzy && make' }
Plug 'ray-x/navigator.lua'
"Plug 'glepnir/lspsaga.nvim', { 'branch': 'main' }
Plug 'folke/lsp-colors.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'jose-elias-alvarez/null-ls.nvim'

"Plug 'vim-scripts/a.vim'
"Plug 'vim-jp/vital.vim'
"Plug 'mrtazz/DoxygenToolkit.vim'
"Plug 'vim-scripts/TaskList.vim'

"Colorschemes
Plug 'RRethy/nvim-base16'

"Completion
"nvim-cmp
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'petertriho/cmp-git'
Plug 'jalvesaq/cmp-nvim-r'
Plug 'onsails/lspkind.nvim'
"Plug 'andersevenrud/cmp-tmux'

"LanguageServer
"Plug 'autozimu/LanguageClient-neovim', {
    "\ 'branch': 'next',
    "\ 'do': 'bash install.sh',
"\ }

"Plug 'Pure-D/serve-d' "D
"Plug 'JuliaEditorSupport/LanguageServer.jl' "Julia

"Plug 'Alloyed/lua-lsp' "Lua

"Plug 'CXuesong/LanguageServer.NET' "C#
"Plug 'eclipse/eclipse.jdt.ls' "Java
"Plug 'snoe/clojure-lsp' "Clojure
"Plug 'palantir/groovy-language-server', {'branch': 'develop'} "Groovy
"Plug 'dragos/dragos-vscode-scala'

"Plug 'microclimate-devops/xml-language-server' "XML

"Plug 'freebroccolo/ocaml-language-server' "Ocaml

"Plug 'vshaxe/haxe-languageserver' "Haxe
"Plug 'rlovelett/langserver-swift' "Swift

"Plug 'georgewfraser/kotlin-language-server' "Kotlin
"Plug 'scalameta/metals'

"Plug 'natebosch/dart_language_server' "Dart
"Plug 'sourcegraph/javascript-typescript-langserver' "Javascript
"Plug 'nwolverson/purescript-language-server' "Purescript

"Plug 'eclipse/xtext-core'

"File Management
Plug 'nvim-tree/nvim-tree.lua'
"Plug 'nvim-neo-tree/neo-tree.nvim'
"Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': 'python3 -m chadtree deps'}
Plug 'kevinhwang91/rnvimr'
Plug 'goolord/alpha-nvim'
"Plug 'amiorin/vim-project' "huh?
"Plug 'Shougo/vimfiler.vim' "still requires Unite!
"Plug 'eiginn/netrw' "remote edit
"Plug 'airblade/vim-rooter' "set root dir correctly

"Icons
Plug 'nvim-tree/nvim-web-devicons' " Recommended (for coloured icons)

"Indent - set up correctly
"Plug 'junegunn/vim-easy-align'
Plug 'Vonr/align.nvim'
"Plug 'nathanaelkane/vim-indent-guides'
Plug 'Yggdroot/indentLine'
Plug 'lukas-reineke/indent-blankline.nvim'
"Plug 'tommcdo/vim-lion'

"Kana
"Plug 'kana/vim-smartinput' "better version of auto-pair
Plug 'windwp/nvim-autopairs'
"Plug 'kana/vim-submode' "create submodes
Plug 'Iron-E/nvim-libmodal'
Plug 'Iron-E/nvim-bufmode'
Plug 'Iron-E/nvim-tabmode'
"Plug 'kana/vim-narrow'
Plug 'chrisbra/NrrwRgn'
"Plug 'folke/zen-mode.nvim'

"Movement
Plug 'phaazon/hop.nvim' "use letters to jump to words

"Python
"Plug 'fs111/pydoc.vim' "python documentation?
"Plug 'alfredodeza/pytest.vim' "test python code

"REPL
Plug 'jalvesaq/Nvim-R', {'branch': 'master'} "R plugin
Plug 'hkupty/iron.nvim'

"Snippets
Plug 'hrsh7th/cmp-vsnip'
Plug 'hrsh7th/vim-vsnip'
Plug 'rafamadriz/friendly-snippets'

"Surround
"Plug 'tpope/vim-endwise' "add end of conditional statements, loops, etc.
Plug 'kylechui/nvim-surround' "to add quotes etc. around word
"Plug 'jiangmiao/auto-pairs' "add parentheses

"Tabs/buffers - slim down!
"Plug 'szw/vim-ctrlspace' "navigate tabs - replace with FZF?
"Plug 'jlanzarotta/bufexplorer'
"Plug 'fholgado/minibufexpl.vim'

"Tags - redundant?
Plug 'simrat39/symbols-outline.nvim'
"Plug 'majutsushi/tagbar' "show tags in navigable bar
"Plug 'vim-scripts/taglist.vim' "show tags in bar - prob. redundant

"Vimscript plugins
"Try to find Lua ports of these
Plug 'chrisbra/csv.vim' "display CSV

Plug 'tpope/vim-repeat' "repeat complex actions (make sure it works)
Plug 'christoomey/vim-system-copy' "use system clipboard

"Comments
Plug 'preservim/nerdcommenter' "shortcuts to comment out
Plug 'tpope/vim-commentary'

"File Management
Plug 'tpope/vim-eunuch' "POSIX file commands

"Icons
Plug 'ryanoasis/vim-devicons' "unicode icons everywhere

"Indent
Plug 'michaeljsmith/vim-indent-object'
Plug 'godlygeek/tabular' "align to specific characters

"Kana plugins
Plug 'kana/vim-smartchr' "replace characters
Plug 'kana/vim-niceblock' "better visual block mode
Plug 'kana/vim-fakeclip' "better clipboard
Plug 'kana/vim-altercmd' "alter existing command
Plug 'kana/vim-advice' "alter commands?

"LaTeX
Plug 'lervag/vimtex' "LaTeX continuous compile

"Markdown
{{ if eq .chezmoi.os "darwin" }}
function! BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release --locked
    else
      !cargo build --release --locked --no-default-features --features json-rpc
    endif
  endif
endfunction
Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
{{ end }}
"Plug 'suan/vim-instant-markdown' "Markdown contiuous compile

"Movement
Plug 'mg979/vim-visual-multi' "sublime text multiple cursor
Plug 'kana/vim-smartword' "better word movement
Plug 'kana/vim-better-tag-jump' "tag jump
Plug 'kana/vim-exjumplist' "jumplist motions

"Operators
Plug 'kana/vim-operator-user' "define own operator
Plug 'kana/vim-operator-replace' "replace existing operator
Plug 'kana/vim-operator-siege'

"Text objects - can tree-sitter replace these?
Plug 'kana/vim-textobj-user' "whole buffer text object
Plug 'kana/vim-textobj-entire' "whole buffer text object
Plug 'kana/vim-textobj-function' "function text object
Plug 'kana/vim-textobj-line' "line text object
Plug 'kana/vim-textobj-help' "help text object
Plug 'kana/vim-textobj-syntax' "syntax text object
Plug 'kana/vim-textobj-lastpat' "lastpattern text object
Plug 'kana/vim-textobj-indent' "indent text object
Plug 'kana/vim-textobj-fold' "fold text object
Plug 'tpope/vim-unimpaired' "miscellaneous paired mappings
Plug 'tpope/vim-abolish' "act on word variants
Plug 'wellle/targets.vim' "more text targets (i.e. parentheses)

"VCS
Plug 'tpope/vim-fugitive' "git plugin
"Plug 'vim-scripts/vcscommand.vim' "is this needed?

call plug#end()

set completeopt=menu,menuone,noinsert,noselect,preview

"tpope/dispatch - async - needed?
"skywind3000/asyncrun.vim - async

"Ag
"map <leader>a <Esc>:FzfAg!

"Load after plugins
filetype plugin indent on
syntax on

"CSV
let g:csv_autocmd_arrange      = 1
"let g:csv_autocmd_arrange_size = 1024*1024

"Fugitive
"Command to automatically commit and push changes
map <leader>vv :Gcommit -a -m "HEAD"<CR> :Gpush -q<CR>

"Gundo
"map <leader>g GundoToggle<CR>

"Minimap
autocmd ColorScheme *
        \ highlight minimapCursor            ctermbg=59  ctermfg=228 guibg=#5F5F5F guifg=#FFFF87 |
        \ highlight minimapRange             ctermbg=242 ctermfg=228 guibg=#4F4F4F guifg=#FFFF87
"let g:minimap_auto_start = 1
let g:minimap_highlight_search = 1
let g:minimap_auto_start_win_enter = 1

"Multiple Cursor
"let g:multi_cursor_quit_key='<Shift><Esc>'
"function Multiple_cursors_before()
  "let g:deoplete#disable_auto_complete = 1
"endfunction
"function Multiple_cursors_after()
  "let g:deoplete#disable_auto_complete = 0
"endfunction

"Nvim Tree
map <leader>n :NvimTreeToggle<CR>
"map <leader>n :Neotree toggle<CR>

"Nvim-R
let r_syntax_folding = 1 "Enable folding
let R_nvimpager = "vertical" "Split vertical
let R_help_w = 80 "set help width
let R_assign = 0 "don't autoinsert <-
let Rout_more_colors = 1 "use more colors
let R_esc_term = 0
let R_rconsole_width = 0
let R_hl_term = 0
let R_ls_env_tol = 1500
"let R_app = "radian"
let R_cmd = "R"
{{ if eq .chezmoi.os "linux" }}
let R_path = '$HOME/micromamba/envs/r/bin'
{{ end }}
"let R_args = []
"let R_vsplit = 1
"let R_nvim_wd = 1
"let R_wait = 60000

" Press the space bar to send lines (in Normal mode) and selections to R:
filetype on
autocmd FileType r vmap <Space> <Plug>RDSendSelection
autocmd FileType r nmap <Space> <Plug>RDSendLine
autocmd FileType r nmap <silent> <LocalLeader>rk :call RAction("levels")<CR>
autocmd FileType r nmap <silent> <LocalLeader>t :call RAction("tail")<CR>
autocmd FileType r nmap <silent> <LocalLeader>h :call RAction("head")<CR>
autocmd FileType r nmap <silent> <LocalLeader>p :call RAction("print")<CR>
autocmd FileType r nmap <silent> <LocalLeader>d :call RAction("dim")<CR>
autocmd FileType r nmap <silent> <LocalLeader>s :call RAction("str")<CR>

"System copy
{{ if eq .chezmoi.os "linux" }}
let g:system_copy#copy_command='xclip'
let g:system_copy#paste_command='xclip -o'
{{ end }}

"Tagbar
"nmap <F10> :TagbarOpenAutoClose<CR>
"let g:tagbar_type_r = {
    "\ 'ctagstype' : 'r',
    "\ 'kinds'     : [
        "\ 'f:Functions',
        "\ 'g:GlobalVariables',
        "\ 'v:FunctionVariables',
    "\ ]
"\ }

"Tasklist
map <leader>td <Plug>TaskList

"Telescope 
noremap <C-P> :Telescope oldfiles<CR>

"Tmux-navigator
let g:tmux_navigator_no_mappings = 1

"Vimtex
"let g:vimtex_latexmk_options="-xelatex" "Use XeLaTeX to compile for better font support
let g:vimtex_compiler_progname='/usr/bin/nvr' "Use NeoVim remote to allow feedback about errors
let g:vimtex_fold_enabled = 1 "Auto fold (not working!)
let g:vimtex_view_method = "skim"
"let g:vimtex_view_general_viewer = 'open -a Skim %:r.pdf'
"let g:vimtex_view_general_options = ''
"let g:vimtex_view_general_options_latexmk = '--unique'
let g:vimtex_compiler_latexmk = {
    \ 'backend' : 'nvim',
    \}
let g:tex_flavor = 'latex'

"set background=light
lua require('base16-colorscheme').with_config { telescope = false }
colorscheme base16-one-light 
"Override rOperator link for base16
hi def link rOperator    Statement 

"Color overrides
autocmd ColorScheme * highlight LineNr guibg=#f0f0f1
"hi Visual ctermfg=0 ctermbg=222
"hi Folded ctermbg=NONE
"highlight Normal ctermbg=NONE
"highlight nonText ctermbg=NONE
"hi Visual ctermbg=11
"hi Spellbad ctermbg=1 ctermfg=15
"hi Search ctermfg=0 ctermbg=59

lua << EOF
    -- Set up lspconfig.
    --local capabilities = require('cmp_nvim_lsp').default_capabilities()
    -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
    require'lspconfig'.r_language_server.setup{}

    --require'navigator'.setup({
    --    lsp = {
    --        format_on_save = false,
    --        diagnostic_scrollbar_sign = false
    --    },
    --})

    local null_ls = require("null-ls")

    null_ls.setup({
        sources = {
            null_ls.builtins.formatting.styler,
            null_ls.builtins.formatting.format_r
        },
    })

    require("nvim-web-devicons").setup({
        color_icons = false
    })
    require("symbols-outline").setup()
    require("scope").setup()
    require("noice").setup({
      lsp = {
        -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
        override = {
          ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
          ["vim.lsp.util.stylize_markdown"] = true,
          ["cmp.entry.get_documentation"] = true,
        },
        hover = {
            enabled = false,
        } 
        },
      presets = {
            command_palette = true, -- position the cmdline and popupmenu together
            long_message_to_split = true, -- long messages will be sent to a split
            inc_rename = false, -- enables an input dialog for inc-rename.nvim
      }
    })
    require("notify").setup()
    require("telescope").setup()
    require("which-key").setup({
        triggers_blacklist = {
            i = {"<space>"},
            v = {"<space>"}
        }
    })
    require("nvim-tree").setup()
    require("bufferline").setup({
        options = {
            separator_style = "slant",
            offsets = {
                {
                    filetype = "NvimTree",
                    text = "File Explorer",
                    highlight = "Directory",
                    separator = true -- use a "true" to enable the default, or set your own character
                },
                {
                    filetype = "neo-tree",
                    text = "File Explorer",
                    highlight = "Directory",
                    separator = true -- use a "true" to enable the default, or set your own character
                }   
            }
        }
    })
    require("lualine").setup()

    local startify = require'alpha.themes.startify'
    local section = startify.section
    local mru = startify.mru
    section.mru.val = {
        { type = "padding", val = 1 },
        { type = "text", val = "MRU", opts = { hl = "SpecialComment" } },
        { type = "padding", val = 1 },
        {
            type = "group",
            val = function()
                return { mru(0) }
            end,
        },
    }
    section.mru_cwd.val = {
        { type = "padding", val = 1 },
        { type = "text", val = "MRU " .. vim.fn.getcwd(), opts = { hl = "SpecialComment", shrink_margin = false } },
        { type = "padding", val = 1 },
        {
            type = "group",
            val = function()
                return { mru(10, vim.fn.getcwd()) }
            end,
            opts = { shrink_margin = false },
        },
    }
    startify.config.layout = {
        { type = "padding", val = 1 },
        section.header,
        { type = "padding", val = 2 },
        section.top_buttons,
        section.mru,
        section.mru_cwd,
        { type = "padding", val = 1 },
        section.bottom_buttons,
        section.footer,
    }

    require("alpha").setup(startify.config)

    -- Set up nvim-cmp.
    local cmp = require'cmp'
    
    local has_words_before = function()
        local line, col = unpack(vim.api.nvim_win_get_cursor(0))
        return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
    end

    local feedkey = function(key, mode)
        vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true), mode, true)
    end

    local lspkind = require('lspkind')

    cmp.setup({
    formatting = {
        fields = {'abbr', 'kind', 'menu'},
        format = lspkind.cmp_format({
            mode = 'symbol_text', -- show only symbol annotations
            maxwidth = 50, -- prevent the popup from showing more than provided characters
            ellipsis_char = '...', -- the truncated part when popup menu exceed maxwidth
            before = function(entry, item)
                local menu_icon = {
                    nvim_lsp = '',
                    vsnip = '',
                    path = '',
                    cmp_zotcite = 'z',
                    cmp_nvim_r = 'R'
                }
                item.menu = menu_icon[entry.source.name]
                return item
            end,
        })
    },
    snippet = {
      expand = function(args)
        vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
      end,
    },
    window = {
      completion = cmp.config.window.bordered(),
      documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
      ["<Tab>"] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif vim.fn["vsnip#available"](1) == 1 then
        feedkey("<Plug>(vsnip-expand-or-jump)", "")
      elseif has_words_before() then
        cmp.complete()
      else
        fallback() -- The fallback function sends a already mapped key. In this case, it's probably `<Tab>`.
      end
      end, { "i", "s" }),
      ["<S-Tab>"] = cmp.mapping(function()
      if cmp.visible() then
        cmp.select_prev_item()
      elseif vim.fn["vsnip#jumpable"](-1) == 1 then
        feedkey("<Plug>(vsnip-jump-prev)", "")
      end
      end, { "i", "s" }),
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'vsnip' },
      { name = 'cmp_nvim_r' }
    }, {
      { name = 'buffer' },
      { name = 'path' },
      { name = 'tmux' }
    })
    })

    -- Set configuration for git.
    cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, 
    }, {
      { name = 'buffer' },
    })
    })

    -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
    cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
    })

    -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
    cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
    })

    local iron = require("iron.core")
    local view = require("iron.view")

    iron.setup {
        config = {
            scratch_repl = false,
            repl_definition = {
                sh = {
                    command = {"zsh"}
                },
                python = {
                    command = {"jupyter-console"}
                }
            },
            --repl_open_cmd = require('iron.view').bottom(40),
            repl_open_cmd = view.split.belowright(50)
        },
        keymaps = {
            visual_send = "<space>",
            send_line = "<space>",
            exit = "<leader>q"
        }
    }

    vim.keymap.set('n', '<leader>s', '<cmd>IronRepl<cr>')
EOF

    "require("lualine").setup({
      "sections = {
        "lualine_x = {
          "{
            "require("noice").api.status.message.get_hl,
            "cond = require("noice").api.status.message.has,
          "},
          "{
            "require("noice").api.status.command.get,
            "cond = require("noice").api.status.command.has,
            "color = { fg = "#ff9e64" },
          "},
          "{
            "require("noice").api.status.mode.get,
            "cond = require("noice").api.status.mode.has,
            "color = { fg = "#ff9e64" },
          "},
          "{
            "require("noice").api.status.search.get,
            "cond = require("noice").api.status.search.has,
            "color = { fg = "#ff9e64" },
          "},
        "},
      "},
    "})
highlight LineNr guibg=#f0f0f1
autocmd BufNewFile,BufRead * lua vim.diagnostic.disable()
