local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

return require('lazy').setup({
    -- Packer can manage itself
    'folke/lazy.nvim',

    -- Chezmoi must be run first
    {'alker0/chezmoi.vim', 
        lazy = false, 
        init = function()
            -- This option is required.
            vim.g['chezmoi#use_tmp_buffer'] = true
            -- add other options here if needed.
        end,
    },

    -- UI
    'MunifTanjim/nui.nvim',
    'nvim-lua/plenary.nvim',
    'rcarriga/nvim-notify',
    'folke/noice.nvim',
    -- 'vigoux/notifier.nvim',

    -- Search
    {'nvim-telescope/telescope-fzf-native.nvim', build = 'cmake -S . -B build -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build'},
    'nvim-telescope/telescope.nvim',

    -- Status information
    -- 'romgrk/barbar.nvim' -- status bar
    {'akinsho/bufferline.nvim', version = '*', dependencies = {'RRethy/nvim-base16', 'nvim-tree/nvim-web-devicons'}},
    'tiagovla/scope.nvim',
    'nvim-lualine/lualine.nvim',
    -- 'wfxr/minimap.vim'

    'mbbill/undotree', -- undo history
    'christoomey/vim-tmux-navigator', -- tmux shortcuts
    'folke/which-key.nvim',
    -- 'nhooyr/neoman.vim', -- neovim to read man pages

    -- LSP
    'folke/trouble.nvim',
    {'ray-x/guihua.lua', build = 'cd lua/fzy && make'},
    'ray-x/navigator.lua',
    -- 'glepnir/lspsaga.nvim', { 'branch': 'main' },
    'folke/lsp-colors.nvim',
    'nvim-treesitter/nvim-treesitter',
    'nvimtools/none-ls.nvim',

    -- Colorschemes
    'RRethy/nvim-base16',

    -- Completion
    -- nvim-cmp
    'neovim/nvim-lspconfig',
    'hrsh7th/cmp-nvim-lsp',
    'hrsh7th/cmp-buffer',
    'hrsh7th/cmp-path',
    'hrsh7th/cmp-cmdline',
    'hrsh7th/nvim-cmp',
    'petertriho/cmp-git',
    'R-nvim/cmp-r',
    'onsails/lspkind.nvim',
    -- 'andersevenrud/cmp-tmux'

    -- File Management
    'nvim-tree/nvim-tree.lua',
    -- 'nvim-neo-tree/neo-tree.nvim',
    -- {'ms-jpq/chadtree', branch = 'chad', 'do': 'python3 -m chadtree deps'},
    'kevinhwang91/rnvimr',
    'goolord/alpha-nvim',

    -- Icons
    'nvim-tree/nvim-web-devicons', --  Recommended (for coloured icons)

    -- Indent - set up correctly
    'Vonr/align.nvim',
    -- 'nathanaelkane/vim-indent-guides'
    'Yggdroot/indentLine',
    'lukas-reineke/indent-blankline.nvim',

    -- Miscellaneous
    'windwp/nvim-autopairs',
    'Iron-E/nvim-libmodal',
    'Iron-E/nvim-bufmode',
    'Iron-E/nvim-tabmode',
    'chrisbra/NrrwRgn',
    -- 'folke/zen-mode.nvim'

    -- Movement
    'phaazon/hop.nvim', -- letters to jump to words

    -- REPL
    --{'jalvesaq/Nvim-R', branch = 'master'}, -- R plugin
    {'R-nvim/R.nvim', branch = 'main'}, -- R plugin
    'Vigemus/iron.nvim',

    -- Snippets
    'hrsh7th/cmp-vsnip',
    'hrsh7th/vim-vsnip',
    'rafamadriz/friendly-snippets',

    -- Surround
    'kylechui/nvim-surround', -- to add quotes etc. around word

    -- Tags - redundant?
    'simrat39/symbols-outline.nvim',

    -- Vimscript plugins
    -- Try to find Lua ports of these
    'chrisbra/csv.vim', -- display CSV

    'tpope/vim-repeat', -- repeat complex actions (make sure it works)
    'christoomey/vim-system-copy', -- system clipboard

    -- Comments
    'preservim/nerdcommenter', -- shortcuts to comment out
    'tpope/vim-commentary',

    -- File Management
    'tpope/vim-eunuch', -- POSIX file commands

    -- Icons
    'ryanoasis/vim-devicons', -- unicode icons everywhere

    -- Indent
    'michaeljsmith/vim-indent-object',
    'godlygeek/tabular', -- align to specific characters

    -- Kana plugins
    --'kana/vim-smartchr', -- replace characters
    --'kana/vim-niceblock', -- better visual block mode
    --'kana/vim-fakeclip', -- better clipboard
    --'kana/vim-altercmd', -- alter existing command
    --'kana/vim-advice', -- alter commands?

    -- LaTeX
    'lervag/vimtex', -- LaTeX continuous compile

    -- Markdown
    {{ if eq .chezmoi.os "darwin"  }}
    {'euclio/vim-markdown-composer', build = 'cargo build --release --locked'},
    {{ end }}

    -- Movement
    'mg979/vim-visual-multi', -- sublime text multiple cursor
    --'kana/vim-smartword', -- better word movement
    --'kana/vim-better-tag-jump', -- tag jump
    --'kana/vim-exjumplist', -- jumplist motions

    -- Operators
    --'kana/vim-operator-user', -- define own operator
    --'kana/vim-operator-replace', -- replace existing operator
    --'kana/vim-operator-siege',

    -- Text objects - can tree-sitter replace these?
    --'kana/vim-textobj-user', -- whole buffer text object
    --'kana/vim-textobj-entire', -- whole buffer text object
    --'kana/vim-textobj-function', -- function text object
    --'kana/vim-textobj-line', -- line text object
    --'kana/vim-textobj-help', -- help text object
    --'kana/vim-textobj-syntax', -- syntax text object
    --'kana/vim-textobj-lastpat', -- lastpattern text object
    --'kana/vim-textobj-indent', -- indent text object
    --'kana/vim-textobj-fold', -- fold text object
    'tpope/vim-unimpaired', -- miscellaneous paired mappings
    'tpope/vim-abolish', -- act on word variants
    'wellle/targets.vim', -- more text targets (i.e. parentheses)

    -- VCS
    'tpope/vim-fugitive' -- git plugin
})
